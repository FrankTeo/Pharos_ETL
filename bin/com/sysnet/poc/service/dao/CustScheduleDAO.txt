package com.sysnet.poc.service.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.transaction.NotSupportedException;
import javax.transaction.SystemException;
import javax.transaction.UserTransaction;

import org.apache.log4j.Logger;

import com.sysnet.poc.control.manage.vo.ConfigureBean;
import com.sysnet.poc.control.manage.vo.StatusBean;
import com.sysnet.poc.service.dao.dbc.ConnDB;
import com.sysnet.poc.transaction.UserTransactionFactory;
import com.sysnet.poc.util.AppServerEnv;
import com.sysnet.poc.util.DateHelper;
import com.sysnet.poc.util.ResourceBundleUtil;

/**
 * 客户调度DAO
 * 
 * @author Ma_Ke
 * 
 */
public class CustScheduleDAO {

	private Logger log = Logger.getLogger(CustScheduleDAO.class);

	/**
	 * 查询数据库,根据数据库的配置表ETL_STAGE_CONFIG_CUST决定取到处理多少个处理线程等信息
	 * 
	 * @return
	 * @throws NamingException
	 * @throws SQLException
	 */
	public ConfigureBean getConfigure() throws NamingException, SQLException {
		Connection conn = null;
		Statement stmt = null;
		try {
			ConfigureBean configureBean = new ConfigureBean();
			int currentHour = DateHelper.getHour();
			conn = ConnDB.getODSConn();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from ETL_STAGE_CONFIG_CUST where START_TIME<=" + currentHour + " and END_TIME>" + currentHour);
			while (rs.next()) {
				configureBean.setSTART_TIME(rs.getString("start_time"));
				configureBean.setEND_TIME(rs.getString("end_time"));
				configureBean.setDEAL_COUNT(rs.getString("deal_count"));
				configureBean.setEXCEPT_MAX_THREAD_COUNT(rs.getInt("except_max_thread_count"));
				configureBean.setGENERAL_MAX_THREAD_COUNT(rs.getInt("general_max_thread_count"));
				configureBean.setEXCEPT_SLEEP_MILLIS_COUNT(rs.getInt("except_sleep_millis_count"));
				configureBean.setGENERAL_SLEEP_MILLIS_COUNT(rs.getInt("general_sleep_millis_count"));
			}
			return configureBean;
		} catch (NamingException ex) {

			throw ex;
		} catch (SQLException ex) {
			throw ex;
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				log.info("查询数据库,根据数据库的配置表ETL_STAGE_CONFIG_CUST决定取到处理多少个处理线程等信息出错!" + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	/**
	 * 查询数据库,根据数据库的配置表ETL_STAGE_STATUS_CUST取得当前批次相关信息
	 * 
	 * @return
	 * @throws NamingException
	 * @throws SQLException
	 */
	public StatusBean getBatStatus() throws NamingException, SQLException {
		StatusBean statusBean = new StatusBean();
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = ConnDB.getODSConn();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from ETL_STAGE_STATUS_CUST order by BAT_ID desc ");
			if (rs.next()) {

				statusBean.setBAT_ID(rs.getInt("bat_id"));
				statusBean.setMAX_OBJECT_ID(rs.getInt("max_object_id"));
				statusBean.setMIN_OBJECT_ID(rs.getInt("min_object_id"));
				statusBean.setRECORD_COUNT(rs.getInt("record_count"));
				statusBean.setODS_DATA_DEAL_STATUS(rs.getString("ods_data_deal_status"));
				statusBean.setSTAGE_DATE_READY_STATUS(rs.getString("stage_date_ready_status"));
			} else {
				statusBean = null;
			}
			return statusBean;
		} catch (NamingException ex) {

			throw ex;
		} catch (SQLException ex) {
			throw ex;
		} finally {
			try {

				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				log.info("查询数据库,根据数据库的配置表ETL_STAGE_STATUS_CUST取得当前批次相关信息!" + e.getMessage());
				e.printStackTrace();
			}
		}

	}

	/**
	 * 查询pharos增量表，取得当前批次未处理数据数量
	 * 
	 * @param batId
	 * @return
	 * @throws NamingException
	 * @throws SQLException
	 */
	public int getPharosIncr(String batId) throws NamingException, SQLException {
		int count = 0;
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = ConnDB.getPharosConn();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(OBJECT_ID) from ETL_PHAROS_INCR_CUST where bat_id='" + batId + "' and STAGE_WRITE_FLAG is null");
			if (rs.next()) {

				count = rs.getInt(1);
			}

			return count;
		} catch (NamingException ex) {

			throw ex;
		} catch (SQLException ex) {
			throw ex;
		} finally {
			try {

				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				log.info("查询pharos增量表，取得当前批次未处理数据数量!" + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	/**
	 * 修ETL_STAGE_STATUS_CUST表改标志位
	 * 
	 * @param batId
	 * @throws NamingException
	 * @throws SQLException
	 */
	public void updateBatStatus(String batId) throws NamingException, SQLException {
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = ConnDB.getODSConn();
			stmt = conn.createStatement();
			boolean rs = stmt.execute("update ETL_STAGE_STATUS_CUST set STAGE_DATE_READY_STATUS=1 where BAT_ID=" + batId);
		} catch (NamingException ex) {

			throw ex;
		} catch (SQLException ex) {
			throw ex;
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				log.info("修ETL_STAGE_STATUS_CUST表改标志位!" + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	/**
	 * 修ETL_STAGE_STATUS_CUST表改标志位
	 * 
	 * @param configureBean
	 * @param statusBean
	 * @return
	 * @throws Exception
	 */
	public boolean insertOneBat(ConfigureBean configureBean, StatusBean statusBean) throws Exception {
		boolean rs = false;
		UserTransaction ut = null;
		Connection conn = null;
		Connection conn1 = null;
		try {

			ut = (UserTransaction) UserTransactionFactory.getUserTransaction();
			try {
				ut.begin();
			} catch (NotSupportedException e2) {

				e2.printStackTrace();
			} catch (SystemException e2) {

				e2.printStackTrace();
			}

			// 判断是否需要产生新的处理批次
			conn1 = ConnDB.getPharosConn();
			Statement state0 = conn1.createStatement();
			ResultSet result = state0.executeQuery("select object_id from ETL_PHAROS_INCR_CUST where STAGE_WRITE_FLAG is null and bat_id is null ");
			if (!result.next()) {
				ut.commit();
				conn1.close();
				return false;
			}

			// 产生新的处理批次
			conn = ConnDB.getODSConn();
			Statement stmt = conn.createStatement();
			int maxID = 0;
			int recordC = 0;
			if (statusBean != null) {
				maxID = statusBean.getBAT_ID() + 1;
				recordC = statusBean.getRECORD_COUNT();
			} else {
				maxID = 1;
				recordC = Integer.parseInt(configureBean.getDEAL_COUNT().trim());
			}
			stmt.execute("insert into ETL_STAGE_STATUS_CUST (BAT_ID,RECORD_COUNT,STAGE_DATE_READY_STATUS ) values (" + maxID + "," + recordC + ",'0')");

			// ==================================

			Statement state1 = conn1.createStatement();
			ResultSet rs1 = state1.executeQuery("select object_id from ETL_PHAROS_INCR_CUST where STAGE_WRITE_FLAG is null order by object_id");
			Statement state2 = conn1.createStatement();
			for (int i = 1; rs1.next() && (i <= recordC); i++) {
				state2.executeUpdate("update ETL_PHAROS_INCR_CUST set bat_id=" + maxID + " where object_id=" + rs1.getInt("object_id"));
			}
			ut.commit();
			rs = true;
		} catch (Exception ex) {
			ex.printStackTrace();
			try {
				ut.rollback();
			} catch (IllegalStateException e) {
				log.info("修ETL_STAGE_STATUS_CUST表改标志位!" + e.getMessage());
				e.printStackTrace();
			} catch (SecurityException e) {
				log.info("修ETL_STAGE_STATUS_CUST表改标志位!" + e.getMessage());
				e.printStackTrace();
			} catch (SystemException e) {
				log.info("修ETL_STAGE_STATUS_CUST表改标志位!" + e.getMessage());
				e.printStackTrace();
			}

			throw ex;
		} finally {
			try {
				if (conn != null) {
					conn.close();
				}
				if (conn1 != null) {
					conn1.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return rs;
	}

}
