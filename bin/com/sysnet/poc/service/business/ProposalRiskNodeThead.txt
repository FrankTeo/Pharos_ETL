package com.sysnet.poc.service.business;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import org.apache.commons.logging.Log;

import pharos.ctm.bo.BContractBO;
import pharos.ctm.bo.WContractBO;
import pharos.ctm.vo.BContract;
import pharos.ctm.vo.WContractNode;

import com.sysnet.poc.control.config.Constants;
import com.sysnet.poc.control.manage.vo.InsideProcess;
import com.sysnet.poc.control.manage.vo.StopBean;
import com.sysnet.poc.mapping.MappingCacheManager;
import com.sysnet.poc.mapping.ProductMappingBuilder;
import com.sysnet.poc.service.dao.PlCIncrementDAO;
import com.sysnet.poc.service.dao.RunLogDAO;
import com.sysnet.poc.service.dao.daoFactory.DAOFactory;
import com.sysnet.poc.service.dao.dbc.ConnDB;
import com.sysnet.poc.service.storage.StorageTransAction;
import com.sysnet.poc.util.OdsLogger;
import com.sysnet.poc.util.ResourceBundleUtil;
import com.sysnet.poc.vo.StgRunLog;

public class ProposalRiskNodeThead extends Thread {
	InsideProcess j = new InsideProcess();

	public ProposalRiskNodeThead(List<InsideProcess> a) {
		super();
		j.setName("风险");
		a.add(j);
	}

	private static final Log log = OdsLogger.getLog("insureLog4j", "Insure");

	private List<Long> riskNodeIDlist = null;

	private int countChar = 0;

	private BContractBO bContractBo;

	private WContractBO wContractBO;
	private boolean write;
	private String object_no;
	private String node_No;

	// private DCS dcs = null;

	public String getNode_No() {
		return node_No;
	}

	public void setNode_No(String node_No) {
		this.node_No = node_No;
	}

	public String getObject_no() {
		return object_no;
	}

	public void setObject_no(String object_no) {
		this.object_no = object_no;
	}

	public WContractBO getWContractBO() {
		return wContractBO;
	}

	public void setWContractBO(WContractBO contractBO) {
		wContractBO = contractBO;
	}

	private String PRODUCT_CD;

	private String PRODUCT_NODE_CD;

	private String proposalNo;

	private String object_Id;

	private String bat_Id;

	private String object_Type;

	private String riskname;

	public String getRiskname() {
		return riskname;
	}

	public void setRiskname(String riskname) {
		this.riskname = riskname;
	}

	public String getBat_Id() {
		return bat_Id;
	}

	public void setBat_Id(String bat_Id) {
		this.bat_Id = bat_Id;
	}

	public String getObject_Type() {
		return object_Type;
	}

	public void setObject_Type(String object_Type) {
		this.object_Type = object_Type;
	}

	public String getObject_Id() {
		return object_Id;
	}

	public void setObject_Id(String object_Id) {
		this.object_Id = object_Id;
	}

	public String getProposalNo() {
		return proposalNo;
	}

	public void setProposalNo(String proposalNo) {
		this.proposalNo = proposalNo;
	}

	// private TotalPremiumAndInsure totalPremiumAndInsure;

	private StopBean stopBean;

	public StopBean getStopBean() {
		return stopBean;
	}

	public void setStopBean(StopBean stopBean) {
		this.stopBean = stopBean;
	}

	public List<Long> getRiskNodeIDlist() {
		return riskNodeIDlist;
	}

	public void setRiskNodeIDlist(List<Long> riskNodeIDlist) {
		this.riskNodeIDlist = riskNodeIDlist;
	}

	public int getCountChar() {
		return countChar;
	}

	public void setCountChar(int countChar) {
		this.countChar = countChar;
	}

	public BContractBO getBContractBo() {
		return bContractBo;
	}

	public void setBContractBo(BContractBO contractBo) {
		bContractBo = contractBo;
	}

	public String getPRODUCT_CD() {
		return PRODUCT_CD;
	}

	public void setPRODUCT_CD(String product_cd) {
		PRODUCT_CD = product_cd;
	}

	public String getPRODUCT_NODE_CD() {
		return PRODUCT_NODE_CD;
	}

	public void setPRODUCT_NODE_CD(String product_node_cd) {
		PRODUCT_NODE_CD = product_node_cd;
	}

	public Connection getConn() {
		return conn;
	}

	public void setConn(Connection conn) {
		this.conn = conn;
	}

	private Connection conn = null;

	@Override
	public void run() {
		try {
			this.toProcessRiskNode();
		} catch (Exception e) {
			write = false;
			PlCIncrementDAO plCIncrementDAO = DAOFactory.getPlcIncrecentDAO();
			Connection conp = null;
			try {
				conp = ConnDB.getPharosConn();
				plCIncrementDAO.updateStatus(conp, Long.valueOf(object_Id), Constants.INCREMENT_WRITE_BACK_STATUS_2);

			} catch (Exception e2) {
				log.error("", e2);
			} finally {
				if (conp != null) {
					try {
						conp.close();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
			}
			log.error("", e);
			// 记录日志到 stg_run_log 表中
			StgRunLog stgLog = new StgRunLog();
			stgLog.setErrorCode("3");
			stgLog.setErrorMessage(e.toString());
			stgLog.setObjectId(object_Id);
			stgLog.setObjectNo(object_no);
			RunLogDAO rld = new RunLogDAO();
			try {
				rld.insertLog(stgLog);
			} catch (SQLException e2) {
				log.error("log error:", e2);
			} catch (NamingException e2) {
				log.error("log error:", e2);
			}
		}

		stopBean.setStop(stopBean.getStop() + 1);
	}

	@SuppressWarnings("unchecked")
	public void toProcessRiskNode() throws Exception {
		// long ftimes = 0;
		int countsOfRiskNode = riskNodeIDlist.size();
		for (int temp = 0; temp < countsOfRiskNode; temp++) {
			// ftimes = System.currentTimeMillis();
			// log.debug("循环 开始 =========="+ftimes);
			Long riskNodeid = (Long) riskNodeIDlist.get(temp);
			// BContractNode node = bContractBo.getContractNode(riskNodeid);
			WContractNode node = wContractBO.getContractNode(riskNodeid);

			String contractNo = "";
			String nodeNo = node.getNodeNo();
			long originalId = node.getOriginalId();
			int mainVersion = node.getMainVersion();
			int nodeVersion = node.getVersion();
			String policyNo = node.getPolicyNo();
			String nodeProposalNo = node.getProposalNo();
			long nodeid = node.getId();
			String dcsNodeId = node.getDcsNodeCode();

			// 调用子模版
			// log.debug("singleBranch模版前耗时=========="+(System.currentTimeMillis()-ftimes));
			// ftimes = System.currentTimeMillis();
			// log.debug("singleBranch模版前=========="+ftimes);
			ProductMappingBuilder singleProductMappingBuilder = new ProductMappingBuilder(PRODUCT_CD);
			singleProductMappingBuilder.setMapDocument(MappingCacheManager.getMapping(PRODUCT_CD, PRODUCT_NODE_CD, "3_1_" + dcsNodeId));
			// log.info("ProposalRiskNodeThead的singleBranch模版共耗时:"+(System.currentTimeMillis()-ftimes));

			// ftimes = System.currentTimeMillis();
			// log.debug("取风险节点的singleBranch前=========="+ftimes);
			BContract singleBContract = bContractBo.getContractSingleBranchByProposalNoAndNodeNo(nodeProposalNo, nodeNo);

			Map<String, String> globalDataMap = new HashMap<String, String>();
			globalDataMap.put("policyno", policyNo);
			globalDataMap.put("proposalno", proposalNo);
			globalDataMap.put("contract_No", contractNo);
			globalDataMap.put("contractno", contractNo);
			globalDataMap.put("nodeNo", nodeNo);
			globalDataMap.put("nodeno", node_No);
			globalDataMap.put("nodeid", String.valueOf(nodeid));
			globalDataMap.put("dcsnodeid", String.valueOf(dcsNodeId));
			globalDataMap.put("originalid", String.valueOf(originalId));
			globalDataMap.put("insurecompanyid", ResourceBundleUtil.getCompanyId());
			globalDataMap.put("insurecompanycode", ResourceBundleUtil.getCompanyCd());
			globalDataMap.put("batid", String.valueOf(bat_Id));
			globalDataMap.put("objectid", object_Id);
			globalDataMap.put("objecttype", object_Type);
			globalDataMap.put("mainversion", String.valueOf(mainVersion));
			globalDataMap.put("version", String.valueOf(nodeVersion));
			globalDataMap.put("productcd", PRODUCT_CD); // 险种代码
			globalDataMap.put("riskname", riskname); // 险种名称
			globalDataMap.put("timestamp", new Date().toString());
			// ftimes = System.currentTimeMillis();
			singleProductMappingBuilder.setBContract(singleBContract);
			singleProductMappingBuilder.setGlobalDataMap(globalDataMap);
			singleProductMappingBuilder.execute();
			// log.info("ProposalRiskNodeThead的196共耗时:"+(System.currentTimeMillis()-ftimes));

			// ftimes = System.currentTimeMillis();
			// log.debug("singleBranch拼sql前=========="+ftimes);
			StorageTransAction storage = new StorageTransAction();
			storage.setConnection(conn);
			storage.setSColumns(singleProductMappingBuilder.getResult());
			storage.buildStatement();
			// log.info("ProposalRiskNodeThead的singleBranch拼sql共耗时"+(System.currentTimeMillis()-ftimes));

			// ftimes = System.currentTimeMillis();
			storage.execute();
			// log.info("ProposalRiskNodeThead的SingleBranch入库共耗时"+(System.currentTimeMillis()-ftimes));
			singleProductMappingBuilder = null;

			/* if(countChar%20==9) */
			if (Runtime.getRuntime().freeMemory() < 50 * 1024 * 1024) {

				// ftimes = System.currentTimeMillis();
				// log.debug("垃圾回收前=========="+ftimes);
				System.gc();
				// log.debug("垃圾回收后
				// =========="+System.currentTimeMillis()+";共耗时:"+(System.currentTimeMillis()-ftimes));
			}
			// log.info("==投保单==风险节点总数：" + countsOfRiskNode + "==当前：" +
			// countChar++);
			j.setNow(++countChar);
			j.setTotal(countsOfRiskNode);
		}
	}

	public boolean isWrite() {
		return write;
	}

	public void setWrite(boolean write) {
		this.write = write;
	}

	// public DCS getDcs() {
	// return dcs;
	// }
	//
	// public void setDcs(DCS dcs) {
	// this.dcs = dcs;
	// if(this.dcs == null){
	//
	// System.out.println("空空空");
	// }
	// }
}
