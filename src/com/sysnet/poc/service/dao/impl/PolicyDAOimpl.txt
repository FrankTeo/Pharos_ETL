package com.sysnet.poc.service.dao.impl;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import com.sysnet.poc.service.dao.PolicyDAO;
import com.sysnet.poc.util.DateHelper;
import com.sysnet.poc.vo.StgPlcCarDeclaration;
import com.sysnet.poc.vo.StgPlcCondition;
import com.sysnet.poc.vo.StgPlcDclRoleInfo;
import com.sysnet.poc.vo.StgPlcPolicy;
import com.sysnet.poc.vo.StgPlcRoleInfo;

public class PolicyDAOimpl implements PolicyDAO {

	private PreparedStatement pstmt = null;

	public void insertPolicy(Connection conn, StgPlcPolicy vo) throws SQLException, Exception {
		if (vo == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicy param vo is null!");
		}
		String sql = "insert into stg_plc_policy(PROPOSAL_NO," + "VERSION," + "POLICY_NO," + "TIME_STAMP," + "START_DATE," + "END_DATE," + "OUT_DATE," + "TAX_ZONE," + "PAY_TYPE," + "PREMIUM_CURRENCY," + "INSURED_VALUE_CURRENCY," + "DISCOUNT," + "DISCOUNT_PCTG," + "LOADING," + "LOADING_PCTG," + "PAYMENT_DAY," + "TEXT," + "LAST_RENEW_DATE," + "ENSURE_DAYS," + "INSURED_VALUE," + "PREMINUM_VALUE," + "CONTRACT_ID," + "MAIN_VERSION," + "TRANSCATON_TYPE," + "TRANSACTION_NO," + "TRANSACTION_DATE," + "TAX_DATE," + "XCG_RATE," + "XCG_DATE," + "PAYMENT_TYPE," + "INVOICING_TYPE," + "ISSUE_DATE," + "COI_TYPE," + "COMMISSION_AMOUNT," + "ACCOUNT_DATE," + "COI_COMMISSION_RATE," + "COI_CONTRACT_NO," + "RENEW_STATUS," + "CONTRACT_NO," + "PRO_COMPANY_ID," + "PRO_COMPANY_NODE_ID," + "CLAIM_TYPE,"
				+ "CATEGORY," + "OWN_PERCENTAGE," + "COMPANY_ID," + "COMPANY_NODE_ID," + "STATUS," + "PRODUCT_ID," + "DISPLAY_NAME," + "REF_NO," + "CAN_RENEW," + "BAT_ID," + "OBJECT_ID," + "OBJECT_TYPE," + "CLIENT_LV," + "POST_STAGE," + "CHANGE_ITEM," + "MOTORCADE_TYPE," + "INSURE_CAR_NUMBER," + "ACTURL_CAR_NUMBER," + "DISCOUNT_TYPE," + "COMMISSION_RATE," + "BROKER_COMMISSION_RATE," + "BROKER_COMMISSION," + "DCS_NODE_ID," + "IS_RENEW," + "BIZ_COMPANY_NODE_ID," + "BIZ_COMPANY_ID) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, vo.getProposalNo());
		pstmt.setLong(2, vo.getVersion());
		pstmt.setString(3, vo.getPolicyNo());
		// pstmt.setTimestamp(4, vo.getTimeStamp());
		pstmt.setDate(5, vo.getStartDate());
		pstmt.setDate(6, vo.getEndDate());
		pstmt.setDate(7, vo.getOutDate());
		pstmt.setLong(8, vo.getTaxZone());
		pstmt.setLong(9, vo.getPayType());
		pstmt.setLong(10, vo.getPremiumCurrency());
		pstmt.setLong(11, vo.getInsuredValueCurrency());
		pstmt.setDouble(12, vo.getDiscount());
		pstmt.setDouble(13, vo.getDiscountPctg());
		pstmt.setDouble(14, vo.getLoading());
		pstmt.setDouble(15, vo.getLoadingPctg());
		pstmt.setLong(16, vo.getPaymentDay());
		pstmt.setString(17, vo.getText());
		pstmt.setDate(18, vo.getLastRenewDate());
		pstmt.setLong(19, vo.getEnsureDays());// why long
		pstmt.setDouble(20, vo.getInsuredValue());
		pstmt.setDouble(21, vo.getPreminumValue());
		pstmt.setLong(22, vo.getContractId());
		pstmt.setLong(23, vo.getMainVersion());
		pstmt.setLong(24, vo.getTranscatonType());
		pstmt.setString(25, vo.getTransactionNo());
		pstmt.setDate(26, vo.getTransactionDate());
		pstmt.setDate(27, vo.getTaxDate());
		pstmt.setDouble(28, vo.getXcgRate());
		pstmt.setDate(29, vo.getXcgDate());
		pstmt.setLong(30, vo.getPaymentType());
		pstmt.setLong(31, vo.getInvoicingType());
		pstmt.setDate(32, vo.getIssueDate());
		pstmt.setLong(33, vo.getCoiType());
		pstmt.setDouble(34, vo.getCommissionAmount());
		// pstmt.setTimestamp(35, vo.getAccountDate());
		pstmt.setDouble(36, vo.getCoiCommissionRate());
		pstmt.setString(37, vo.getCoiContractNo());
		pstmt.setLong(38, vo.getRenewStatus());
		pstmt.setString(39, vo.getContractNo());
		pstmt.setLong(40, vo.getProCompanyId());
		pstmt.setLong(41, vo.getProCompanyNodeId());
		pstmt.setLong(42, vo.getClaimType());
		pstmt.setLong(43, vo.getCategory());
		pstmt.setDouble(44, vo.getOwnPercentage());
		pstmt.setLong(45, vo.getCompanyId());
		pstmt.setLong(46, vo.getCompanyNodeId());
		pstmt.setLong(47, vo.getStatus());
		pstmt.setLong(48, vo.getProductId());
		pstmt.setString(49, vo.getDisplayName());
		pstmt.setString(50, vo.getRefNo());
		pstmt.setLong(51, vo.getCanRenew());
		pstmt.setLong(52, vo.getBatId());
		pstmt.setLong(53, vo.getObjectId());
		pstmt.setString(54, vo.getObjectType());
		pstmt.setLong(55, vo.getClientLv());
		pstmt.setString(56, vo.getPostStage());
		pstmt.setString(57, vo.getChangeItem());
		pstmt.setString(58, vo.getMotorcadeType());
		pstmt.setLong(59, vo.getInsureCarNumber());
		pstmt.setLong(60, vo.getActurlCarNumber());
		pstmt.setLong(61, vo.getDiscountType());
		pstmt.setDouble(62, vo.getCommissionRate());
		pstmt.setDouble(63, vo.getBrokerCommissionRate());
		pstmt.setDouble(64, vo.getBrokerCommission());
		pstmt.setLong(65, vo.getDcsNodeId());
		pstmt.setLong(66, vo.getIsRenew());
		pstmt.setLong(67, vo.getBizCompanyNodeId());
		pstmt.setLong(68, vo.getBizCompanyId());
		pstmt.execute();
	}

	public void insertPolicyCondition(Connection conn, List<Serializable> list) throws SQLException, Exception {
		if (list == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicyCondition param list is null!");
		}
		String sql = "insert into STG_PLC_CONDITION(POLICY_NO," + "DCONDITION_ID," + "INCLUDE," + "IS_RENEW," + "CLAIM_CODE," + "IS_USE," + "RATE," + "PREMIUM_AMOUNT," + "PREMIUM_YEAR," + "INSURED_VALUE_AMOUNT," + "LOADING_PCTG," + "DISCOUNTING_PCTG," + "REI_RATE," + "REI_PREMIUM_AMOUNT," + "LOADING_AMOUNT," + "DISCOUNT_AMOUNT," + "COI_PCTG," + "COMMISSION_RATE," + "COMMISSION_AMOUNT," + "EXHAUSTED," + "QUOTA," + "RATE_BASIS," + "RATE_TYPE," + "PRORATE," + "TIME_STAMP," + "DEDUCTIBLE_AMOUNT," + "DEDUCTIBLE_PCTG," + "EARNED_PREMIUM_AMOUNT," + "UNEARNED_PREMIUM_AMOUNT," + "INSURED_LIMIT_EVENT_AMOUNT," + "INSURED_LIMIT_TERM_AMOUNT," + "FRANCHINSE_LIMIT_EVENT_AMOUNT," + "INSURED_TYPE," + "VARIABLE_INDEX_TYPE," + "CONDITION_TEXT," + "LOAD_DESCRIPTION," + "INSURANCE_CODE," + "RISK_CODE,"
				+ "ITEM_NO," + "CONDITION_CLASS," + "PRORATE_TYPE," + "LOI," + "START_DATE," + "END_DATE," + "OUT_DATE," + "PREMIUM_CURRENCY," + "INSURED_VALUE_CURRENCY," + "REI_PREMIUM_CURRENCY," + "EARNED_PREMIUM_CURRENCY," + "UNEARNED_PREMIUM_CURRENCY," + "INSURED_LIMIT_EVENT_CURRENCY," + "INSURED_LIMIT_TERM_CURRENCY," + "LOADING_CURRENCY," + "DISCOUNT_CURRENCY," + "CAT_ACCUMULATE_ZONE," + "WAITING_PERIOD," + "EFFECTIVE_PERIOD," + "REI_EARNED_PREMIUM_CURRENCY," + "REI_EARNED_PREMIUM_AMOUNT," + "REI_UNEARNED_PREMIUM_CURRENCY," + "REI_UNEARNED_PREMIUM_AMOUNT," + "COPAYMENT_PCTG," + "COPAYMENT_CURRENCY," + "COPAYMENT_AMOUNT," + "DEDUCTIBLE_CURRENCY," + "COMMISSION_CURRENCY," + "VERSION," + "CONDITION_ID," + "MAIN_VERSION," + "OBJECT_ID," + "OBJECT_TYPE," + "BAT_ID," + "ADDITIONAL_AREA,"
				+ "PARK_DAYS," + "AREA_EVENT_TYPE," + "NEGOTIATION)values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		for (int i = 0; i < list.size(); i++) {
			StgPlcCondition vo = (StgPlcCondition) list.get(i);
			if (vo == null) {
				throw new Exception("Class of PolicyDAOimpl mothed insertPolicyCondition param vo of list is null!");
			}

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getPolicyNo());
			pstmt.setLong(2, vo.getDconditionId());
			pstmt.setLong(3, vo.getInclude());
			pstmt.setString(4, vo.getIsRenew());
			pstmt.setString(5, vo.getClaimCode());
			pstmt.setString(6, vo.getIsUse());
			pstmt.setDouble(7, vo.getRate());
			pstmt.setDouble(8, vo.getPremiumAmount());
			pstmt.setString(9, vo.getPremiumYear());
			pstmt.setDouble(10, vo.getInsuredValueAmount());
			pstmt.setDouble(11, vo.getLoadingPctg());
			pstmt.setDouble(12, vo.getDiscountingPctg());
			pstmt.setDouble(13, vo.getReiRate());
			pstmt.setDouble(14, vo.getReiPremiumAmount());
			pstmt.setDouble(15, vo.getLoadingAmount());
			pstmt.setDouble(16, vo.getDiscountAmount());
			pstmt.setDouble(17, vo.getCoiPctg());
			pstmt.setDouble(18, vo.getCommissionRate());
			pstmt.setDouble(19, vo.getCommissionAmount());
			pstmt.setString(20, vo.getExhausted());
			pstmt.setString(21, vo.getQuota());
			pstmt.setString(22, vo.getRateBasis());
			pstmt.setString(23, vo.getRateType());
			pstmt.setString(24, vo.getProrate());
			// pstmt.setTimestamp(25, vo.getTimeStamp());
			pstmt.setDouble(26, vo.getDeductibleAmount());
			pstmt.setDouble(27, vo.getDeductiblePctg());
			pstmt.setDouble(28, vo.getEarnedPremiumAmount());
			pstmt.setDouble(29, vo.getUnearnedPremiumAmount());
			pstmt.setDouble(30, vo.getInsuredLimitEventAmount());
			pstmt.setDouble(31, vo.getInsuredLimitTermAmount());
			pstmt.setDouble(32, vo.getFranchinseLimitEventAmount());
			pstmt.setString(33, vo.getInsuredType());
			pstmt.setLong(34, vo.getVariableIndexType());
			pstmt.setString(35, vo.getConditionText());
			pstmt.setString(36, vo.getLoadDescription());
			pstmt.setString(37, vo.getInsuranceCode());
			pstmt.setString(38, vo.getRiskCode());
			pstmt.setLong(39, 1);
			pstmt.setLong(40, vo.getConditionClass());
			pstmt.setLong(41, vo.getProrateType());
			pstmt.setLong(42, vo.getLoi());
			pstmt.setDate(43, vo.getStartDate());
			pstmt.setDate(44, vo.getEndDate());
			pstmt.setDate(45, vo.getOutDate());
			pstmt.setLong(46, vo.getPremiumCurrency());
			pstmt.setLong(47, vo.getInsuredValueCurrency());
			pstmt.setLong(48, vo.getReiPremiumCurrency());
			pstmt.setLong(49, vo.getEarnedPremiumCurrency());
			pstmt.setLong(50, vo.getUnearnedPremiumCurrency());
			pstmt.setLong(51, vo.getInsuredLimitEventCurrency());
			pstmt.setLong(52, vo.getInsuredLimitTermCurrency());
			pstmt.setLong(53, vo.getLoadingCurrency());
			pstmt.setLong(54, vo.getDiscountCurrency());
			pstmt.setLong(55, vo.getCatAccumulateZone());
			pstmt.setLong(56, vo.getWaitingPeriod());
			pstmt.setLong(57, vo.getEffectivePeriod());
			pstmt.setLong(58, vo.getReiEarnedPremiumCurrency());
			pstmt.setDouble(59, vo.getReiEarnedPremiumAmount());
			pstmt.setLong(60, vo.getReiUnearnedPremiumCurrency());
			pstmt.setDouble(61, vo.getReiUnearnedPremiumAmount());
			pstmt.setDouble(62, vo.getCopaymentPctg());
			pstmt.setLong(63, vo.getCopaymentCurrency());
			pstmt.setDouble(64, vo.getCopaymentAmount());
			pstmt.setLong(65, vo.getDeductibleCurrency());
			pstmt.setLong(66, vo.getCommissionCurrency());
			pstmt.setLong(67, vo.getVersion());
			pstmt.setLong(68, vo.getConditionId());
			pstmt.setLong(69, vo.getMainVersion());
			pstmt.setLong(70, vo.getObjectId());
			pstmt.setString(71, vo.getObjectType());
			pstmt.setLong(72, vo.getBatId());
			pstmt.setString(73, vo.getAdditionalArea());
			pstmt.setLong(74, vo.getParkDays());
			pstmt.setString(75, vo.getAreaEventType());
			pstmt.setString(76, vo.getNegotiation());
			pstmt.execute();
		}
	}

	public void insertPolicyDeclaration(Connection conn, StgPlcCarDeclaration vo) throws SQLException, Exception {
		if (vo == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicyObject param vo is null!");
		}
		String sql = "insert into STG_PLC_CAR_DECLARATION(POLICY_NO," + "HKM_CAR_NO," + "ITEM_NO," + "TIME_STAMP," + "VIN_NO," + "ACTUAL_PRICE," + "AGE_LIMIT," + "APPLY_LOCATION," + "ATTRIBUTION," + "BREAK_TIMES," + "BUSINESS_SOURCE," + "CAR_BYNAME," + "CAR_NUMBER," + "CAR_TYPE_CODE," + "CAR_TYPE_NAME," + "CAR_TYPE_QUOTIETY_FACTORY," + "CAR_TYPE_QUOTIETY_LOSS," + "CAR_TYPE_QUOTIETY_THEFT," + "CAR_TYPE," + "CHANGE_DATE," + "CHANGE_TIMES," + "CHANNEL_CODE," + "CHECK_DATE," + "CHECK_DETAIL," + "CLAIM_TIMES," + "CLAUSE_PRODUCT," + "DISPUTE," + "DRIVING_AREA," + "ENGINE_NO," + "EQUIPMENT_QUALITY," + "GAS," + "IS_DETAIL," + "IS_DISCOUNT," + "IS_LOANOFF," + "IS_MAINTAIN," + "IS_RENEWAL," + "IS_SPOT," + "MANUFACTURER," + "NOTE," + "NUMBER_TYPE," + "PARKING_PLACE," + "PASSENGER," + "PLATE_COLOR,"
				+ "PLATE_NO," + "PRICE," + "PROJECT_CODE," + "QUALITY," + "QUICK_FILTER_CODE," + "REGISTER_DATE," + "RELATIVE_PRICE," + "SECURITY," + "SPECIAL_AGREEMENT," + "TRANSMISSION_TYPE," + "USE," + "VEHICLE_COLOR," + "VEHICLE_RELATIONSHIP," + "VEHICLE_TYPE," + "VEHICLE_TYPE_BYNAME," + "YEAR," + "YEARLY_MILES," + "BAT_ID," + "OBJECT_ID," + "OBJECT_TYPE," + "SPECIAL_AGREEMENT_CODE," + "SPECIAL_AGREEMENT_CONTENT," + "DIRECT_BUSINESS_TYPE," + "MILE_AGES," + "NEW_VEHICLE_FLAG," + "ECDEMIC_VEHICLE_FLAG," + "SPECIAL_CAR_FLAG," + "NO_DAMAGE_YEARS," + "POWER," + "AREA," + "HK_FLAG," + "COUNTRY_CODE," + "MAKE_DATE," + "INVOICE_NO," + "LAST_INSURER," + "MODEL," + "BUY_DATE," + "POLICY_TYPE," + "JUDICAL_SCOPE," + "IS_DEDUCTIBLE_PCTG," + "GLASS_SOURCE," + "IS_LOYAL_DISCOUNT,"
				+ "IS_NO_CLAIM_DISCOUNT," + "IS_SAFETY," + "IS_THEFT_DISCOUNT," + "IS_LOSS_DISCOUNT," + "IS_YEARLY_MILES_DISCOUNT," + "LOYAL_DISCOUNT," + "NO_CLAIM_DISCOUNT," + "SAFETY_DISCOUNT," + "YEARLY_MILES_DISCOUNT," + "COMMERCIAL_NO_PAID_CONTINUS," + "COMMERCIAL_PAID_TIMES_LY," + "COMMERCIAL_PAID_TIMES_TY," + "SALI_NO_PAID_CONTINUS," + "SALI_PAID_TIMES_LY) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		pstmt = conn.prepareStatement(sql);
		// pstmt.setString(1, vo.getPolicyNo());
		// pstmt.setString(2, vo.getHkmCarNo());
		// pstmt.setLong(3, 1);
		// pstmt.setDate(4, vo.getTimeStamp());
		// pstmt.setString(5, vo.getVinNo());
		// pstmt.setDouble(6, vo.getActualPrice());
		// pstmt.setLong(7, vo.getAgeLimit());
		// pstmt.setString(8, vo.getApplyLocation());
		// pstmt.setString(9, vo.getAttribution());
		// pstmt.setLong(10, vo.getBreakTimes());
		// pstmt.setString(11, vo.getBusinessSource());
		// pstmt.setString(12, vo.getCarByname());
		// pstmt.setString(13, vo.getCarNumber());
		// pstmt.setString(14, vo.getCarTypeCode());
		// pstmt.setString(15, vo.getCarTypeName());
		// pstmt.setFloat(16, vo.getCarTypeQuotietyFactory());
		// pstmt.setFloat(17, vo.getCarTypeQuotietyLoss());
		// pstmt.setFloat(18, vo.getCarTypeQuotietyTheft());
		// pstmt.setString(19, vo.getCarType());
		// pstmt.setDate(20, vo.getChangeDate());
		// pstmt.setLong(21, vo.getChangeTimes());
		// pstmt.setString(22, vo.getChannelCode());
		// pstmt.setDate(23, vo.getCheckDate());
		// pstmt.setString(24, vo.getCheckDetail());
		// pstmt.setLong(25, vo.getClaimTimes());
		// pstmt.setString(26, vo.getClauseProduct());
		// pstmt.setString(27, vo.getDispute());
		// pstmt.setString(28, vo.getDrivingArea());
		// pstmt.setString(29, vo.getEngineNo());
		// pstmt.setFloat(30, vo.getEquipmentQuality());
		// pstmt.setFloat(31, vo.getGas());
		// pstmt.setString(32, vo.getIsDetail());
		// pstmt.setString(33, vo.getIsDiscount());
		// pstmt.setString(34, vo.getIsLoanoff());
		// pstmt.setString(35, vo.getIsMaintain());
		// pstmt.setString(36, vo.getIsRenewal());
		// pstmt.setString(37, vo.getIsSpot());
		// pstmt.setString(38, vo.getManufacturer());
		// pstmt.setString(39, vo.getNote());
		// pstmt.setString(40, vo.getNumberType());
		// pstmt.setString(41, vo.getParkingPlace());
		// pstmt.setLong(42, vo.getPassenger());
		// pstmt.setString(43, vo.getPlateColor());
		// pstmt.setString(44, vo.getPlateNo());
		// pstmt.setDouble(45, vo.getPrice());
		// pstmt.setString(46, vo.getProjectCode());
		// pstmt.setFloat(47, vo.getQuality());
		// pstmt.setString(48, vo.getQuickFilterCode());
		// pstmt.setDate(49, vo.getRegisterDate());
		// pstmt.setString(50, vo.getRelativePrice());
		// pstmt.setString(51, vo.getSecurity());
		// pstmt.setString(52, vo.getSpecialAgreement());
		// pstmt.setString(53, vo.getTransmissionType());
		// pstmt.setString(54, vo.getUse());
		// pstmt.setString(55, vo.getVehicleColor());
		// pstmt.setString(56, vo.getVehicleRelationship());
		// pstmt.setString(57, vo.getVehicleType());
		// pstmt.setString(58, vo.getVehicleTypeByname());
		// pstmt.setDate(59, vo.getYear());
		// pstmt.setFloat(60, vo.getYearlyMiles());
		// pstmt.setLong(61, vo.getBatId());
		// pstmt.setLong(62, vo.getObjectId());
		// pstmt.setString(63, vo.getObjectType());
		// pstmt.setString(64, vo.getSpecialAgreementCode());
		// pstmt.setString(65, vo.getSpecialAgreementContent());
		// pstmt.setString(66, vo.getDirectBusinessType());
		// pstmt.setString(67, vo.getMileAges());
		// pstmt.setString(68, vo.getNewVehicleFlag());
		// pstmt.setString(69, vo.getEcdemicVehicleFlag());
		// pstmt.setString(70, vo.getSpecialCarFlag());
		// pstmt.setLong(71, vo.getNoDamageYears());
		// pstmt.setFloat(72, vo.getPower());
		// pstmt.setString(73, vo.getArea());
		// pstmt.setLong(74, vo.getHkFlag());
		// pstmt.setString(75, vo.getCountryCode());
		// pstmt.setDate(76, vo.getMakeDate());
		// pstmt.setString(77, vo.getInvoiceNo());
		// pstmt.setString(78, vo.getLastInsurer());
		// pstmt.setString(79, vo.getModel());
		// pstmt.setDate(80, vo.getBuyDate());
		// pstmt.setString(81, vo.getPolicyType());
		// pstmt.setString(82, vo.getJudicalScope());
		// pstmt.setString(83, vo.getIsDeductiblePctg());
		// pstmt.setString(84, vo.getGlassSource());
		// pstmt.setString(85, vo.getIsLoyalDiscount());
		// pstmt.setString(86, vo.getIsNoClaimDiscount());
		// pstmt.setString(87, vo.getIsSafety());
		// pstmt.setString(88, vo.getIsTheftDiscount());
		// pstmt.setString(89, vo.getIsLossDiscount());
		// pstmt.setString(90, vo.getIsYearlyMilesDiscount());
		// pstmt.setFloat(91, vo.getLoyalDiscount());
		// pstmt.setFloat(92, vo.getNoClaimDiscount());
		// pstmt.setLong(93, vo.getSafetyDiscount());
		// pstmt.setFloat(94, vo.getYearlyMilesDiscount());
		// pstmt.setLong(95, vo.getCommercialNoPaidContinus());
		// pstmt.setLong(96, vo.getCommercialPaidTimesLy());
		// pstmt.setLong(97, vo.getCommercialPaidTimesTy());
		// pstmt.setLong(98, vo.getSaliNoPaidContinus());
		// pstmt.setLong(99, vo.getSaliPaidTimesLy());

		pstmt.setString(1, vo.getPolicyNo());
		pstmt.setString(2, "");
		pstmt.setLong(3, 1);
		pstmt.setTimestamp(4, DateHelper.sqlCurrentlyDate());
		pstmt.setString(5, "");
		pstmt.setDouble(6, 0.0);
		pstmt.setLong(7, 0L);
		pstmt.setString(8, "");
		pstmt.setString(9, "");
		pstmt.setLong(10, 0L);
		pstmt.setString(11, "");
		pstmt.setString(12, "");
		pstmt.setString(13, "");
		pstmt.setString(14, "");
		pstmt.setString(15, "");
		pstmt.setFloat(16, 0);
		pstmt.setFloat(17, 0);
		pstmt.setFloat(18, 0);
		pstmt.setString(19, "");
		pstmt.setTimestamp(20, DateHelper.sqlCurrentlyDate());
		pstmt.setLong(21, 0L);
		pstmt.setString(22, "");
		pstmt.setTimestamp(23, DateHelper.sqlCurrentlyDate());
		pstmt.setString(24, "");
		pstmt.setLong(25, 0L);
		pstmt.setString(26, "");
		pstmt.setString(27, "");
		pstmt.setString(28, "");
		pstmt.setString(29, "");
		pstmt.setFloat(30, 0);
		pstmt.setFloat(31, 0);
		pstmt.setString(32, "");
		pstmt.setString(33, "");
		pstmt.setString(34, "");
		pstmt.setString(35, "");
		pstmt.setString(36, "");
		pstmt.setString(37, "");
		pstmt.setString(38, "");
		pstmt.setString(39, "");
		pstmt.setString(40, "");
		pstmt.setString(41, "");
		pstmt.setLong(42, 0L);
		pstmt.setString(43, "");
		pstmt.setString(44, "");
		pstmt.setDouble(45, 0);
		pstmt.setString(46, "");
		pstmt.setFloat(47, 0);
		pstmt.setString(48, "");
		pstmt.setTimestamp(49, DateHelper.sqlCurrentlyDate());
		pstmt.setString(50, "");
		pstmt.setString(51, "");
		pstmt.setString(52, "");
		pstmt.setString(53, "");
		pstmt.setString(54, "");
		pstmt.setString(55, "");
		pstmt.setString(56, "");
		pstmt.setString(57, "");
		pstmt.setString(58, "");
		pstmt.setTimestamp(59, DateHelper.sqlCurrentlyDate());
		pstmt.setFloat(60, 0);
		pstmt.setLong(61, 0L);
		pstmt.setLong(62, 0L);
		pstmt.setString(63, "");
		pstmt.setString(64, "");
		pstmt.setString(65, "");
		pstmt.setString(66, "");
		pstmt.setString(67, "");
		pstmt.setString(68, "");
		pstmt.setString(69, "");
		pstmt.setString(70, "");
		pstmt.setLong(71, 0L);
		pstmt.setFloat(72, 0);
		pstmt.setString(73, "");
		pstmt.setLong(74, 0L);
		pstmt.setString(75, "");
		pstmt.setTimestamp(76, DateHelper.sqlCurrentlyDate());
		pstmt.setString(77, "");
		pstmt.setString(78, "");
		pstmt.setString(79, "");
		pstmt.setTimestamp(80, DateHelper.sqlCurrentlyDate());
		pstmt.setString(81, "");
		pstmt.setString(82, "");
		pstmt.setString(83, "");
		pstmt.setString(84, "");
		pstmt.setString(85, "");
		pstmt.setString(86, "");
		pstmt.setString(87, "");
		pstmt.setString(88, "");
		pstmt.setString(89, "");
		pstmt.setString(90, "");
		pstmt.setFloat(91, 0);
		pstmt.setFloat(92, 0);
		pstmt.setLong(93, 0L);
		pstmt.setFloat(94, 0);
		pstmt.setLong(95, 0);
		pstmt.setLong(96, 0);
		pstmt.setLong(97, 0);
		pstmt.setLong(98, 0);
		pstmt.setLong(99, 0);

		pstmt.execute();
	}

	public void insertPolicyRoleInfo(Connection conn, List<Serializable> list) throws SQLException, Exception {
		if (list == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicyRoleInfo param list is null!");
		}
		String sql = "insert into STG_PLC_ROLE_INFO(ROLE_ID," + "ROLE_TYPE," + "PARTY_ID," + "DROLE_ID," + "LAYER," + "PERCENTAGE," + "NAME," + "OBJECT_TYPE," + "TIME_STAMP," + "BAT_ID," + "OBJECT_ID," + "POLICY_NO," + "PARTY_CODE) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
		for (int i = 0; i < list.size(); i++) {
			StgPlcRoleInfo vo = (StgPlcRoleInfo) list.get(i);
			if (vo == null) {
				throw new Exception("Class of PolicyDAOimpl mothed insertPolicyRoleInfo param vo of list is null!");
			}
			pstmt = conn.prepareStatement(sql);
			pstmt.setLong(1, vo.getRoleId());
			pstmt.setString(2, vo.getRoleType());
			pstmt.setLong(3, vo.getPartyId());
			pstmt.setLong(4, vo.getDroleId());
			pstmt.setLong(5, vo.getLayer());
			pstmt.setDouble(6, vo.getPercentage());
			pstmt.setString(7, vo.getName());
			pstmt.setString(8, vo.getObjectType());
			// pstmt.setTimestamp(9, vo.getTimeStamp());
			pstmt.setLong(10, vo.getBatId());
			pstmt.setLong(11, vo.getObjectId());
			pstmt.setString(12, vo.getPolicyNo());
			pstmt.setLong(13, vo.getPartyCode());
			pstmt.execute();
		}
	}

	public void insertPolicyDclRoleInfo(Connection conn, List<Serializable> list) throws SQLException, Exception {
		if (list == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicyDclRoleInfo param list is null!");
		}
		String sql = "insert into STG_PLC_DCL_ROLE_INFO(ROLE_ID," + "DROLE_ID," + "LAYER," + "PERCENTAGE," + "NAME," + "TIME_STAMP," + "PARTY_ID," + "OBJECT_TYPE," + "BAT_ID," + "OBJECT_ID," + "POLICY_NO," + "ITEM_NO) value(?,?,?,?,?,?,?,?,?,?,?,?)";
		StgPlcDclRoleInfo vo = (StgPlcDclRoleInfo) list.get(0);

		if (vo == null) {
			throw new Exception("Class of PolicyDAOimpl mothed insertPolicyDclRoleInfo param vo of list is null!");
		}
		pstmt = conn.prepareStatement(sql);
		pstmt.setLong(1, vo.getRoleId());
		pstmt.setLong(2, vo.getDroleId());
		pstmt.setLong(3, vo.getLayer());
		pstmt.setDouble(4, vo.getPercentage());
		pstmt.setString(5, vo.getName());
		pstmt.setString(6, vo.getTimeStamp());
		pstmt.setLong(7, vo.getPartyId());
		pstmt.setString(8, vo.getObjectType());
		pstmt.setLong(9, vo.getBatId());
		pstmt.setLong(10, vo.getObjectId());
		pstmt.setString(11, vo.getPolicyNo());
		pstmt.setLong(12, 1);
		pstmt.execute();
	}

}
