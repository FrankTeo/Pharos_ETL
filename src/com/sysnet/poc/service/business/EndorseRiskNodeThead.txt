package com.sysnet.poc.service.business;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import org.apache.commons.logging.Log;

import pharos.ctm.bo.WContractBO;
import pharos.ctm.exception.CTMException;
import pharos.ctm.vo.WContractNode;
import pharos.ctm.vo.WContract;

import com.sysnet.poc.control.config.Constants;
import com.sysnet.poc.control.manage.vo.InsideProcess;
import com.sysnet.poc.control.manage.vo.StopBean;
import com.sysnet.poc.mapping.MappingCacheManager;
import com.sysnet.poc.mapping.ProductMappingBuilder;
import com.sysnet.poc.service.dao.PlCIncrementDAO;
import com.sysnet.poc.service.dao.RunLogDAO;
import com.sysnet.poc.service.dao.daoFactory.DAOFactory;
import com.sysnet.poc.service.dao.dbc.ConnDB;
import com.sysnet.poc.service.storage.StorageTransAction;
import com.sysnet.poc.util.OdsLogger;
import com.sysnet.poc.vo.StgRunLog;

public class EndorseRiskNodeThead extends Thread {
	InsideProcess j = new InsideProcess();

	public EndorseRiskNodeThead(List<InsideProcess> a) {
		super();
		j.setName("风险");
		a.add(j);
	}

	private static final Log log = OdsLogger.getLog("insureLog4j", "Insure");

	private List<Long> riskNodeIDlist = null;

	private int countChar = 0;

	private String lastEndorseNo;
	private String productCode;

	public String getProductCode() {
		return productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	private String incrProposalNo;

	private WContractBO wContractBo;

	public WContractBO getwContractBo() {
		return wContractBo;
	}

	public void setwContractBo(WContractBO wContractBo) {
		this.wContractBo = wContractBo;
	}

	public String getLastEndorseNo() {
		return lastEndorseNo;
	}

	public void setLastEndorseNo(String lastEndorseNo) {
		this.lastEndorseNo = lastEndorseNo;
	}

	private String PRODUCT_CD;

	private String PRODUCT_NODE_CD;

	private String object_Id;

	private String bat_Id;

	private String object_Type;

	private String originalprpno;

	private String edrflag = "0"; // 批改标志

	private String newflag = "0"; // 最新保全标志

	public String getEndorseNo() {
		return endorseNo;
	}

	public void setEndorseNo(String endorseNo) {
		this.endorseNo = endorseNo;
	}

	public String getProposalNo() {
		return proposalNo;
	}

	public void setProposalNo(String proposalNo) {
		this.proposalNo = proposalNo;
	}

	public String getEnddate() {
		return enddate;
	}

	public void setEnddate(String enddate) {
		this.enddate = enddate;
	}

	public String getStartdate() {
		return startdate;
	}

	public void setStartdate(String startdate) {
		this.startdate = startdate;
	}

	private boolean write;
	private String object_no;
	private String riskname;
	private String endorsetext;

	private String policyNo;

	private String endorseNo;

	private String contractNo;

	private String proposalNo;

	private String enddate;

	private String startdate;

	public String getEndorsetext() {
		return endorsetext;
	}

	public void setEndorsetext(String endorsetext) {
		this.endorsetext = endorsetext;
	}

	public String getRiskname() {
		return riskname;
	}

	public void setRiskname(String riskname) {
		this.riskname = riskname;
	}

	// private DCS dcs = null;

	public String getPolicyNo() {
		return policyNo;
	}

	public void setPolicyNo(String policyNo) {
		this.policyNo = policyNo;
	}

	public String getContractNo() {
		return contractNo;
	}

	public void setContractNo(String contractNo) {
		this.contractNo = contractNo;
	}

	public String getEdrflag() {
		return edrflag;
	}

	public void setEdrflag(String edrflag) {
		this.edrflag = edrflag;
	}

	public String getNewflag() {
		return newflag;
	}

	public void setNewflag(String newflag) {
		this.newflag = newflag;
	}

	public String getBat_Id() {
		return bat_Id;
	}

	public void setBat_Id(String bat_Id) {
		this.bat_Id = bat_Id;
	}

	public String getObject_Type() {
		return object_Type;
	}

	public void setObject_Type(String object_Type) {
		this.object_Type = object_Type;
	}

	public String getObject_Id() {
		return object_Id;
	}

	public void setObject_Id(String object_Id) {
		this.object_Id = object_Id;
	}

	private StopBean stopBean;

	public String getIncrProposalNo() {
		return incrProposalNo;
	}

	public void setIncrProposalNo(String incrProposalNo) {
		this.incrProposalNo = incrProposalNo;
	}

	public StopBean getStopBean() {
		return stopBean;
	}

	public void setStopBean(StopBean stopBean) {
		this.stopBean = stopBean;
	}

	public List<Long> getRiskNodeIDlist() {
		return riskNodeIDlist;
	}

	public void setRiskNodeIDlist(List<Long> riskNodeIDlist) {
		this.riskNodeIDlist = riskNodeIDlist;
	}

	public int getCountChar() {
		return countChar;
	}

	public void setCountChar(int countChar) {
		this.countChar = countChar;
	}

	public String getPRODUCT_CD() {
		return PRODUCT_CD;
	}

	public void setPRODUCT_CD(String product_cd) {
		PRODUCT_CD = product_cd;
	}

	public String getPRODUCT_NODE_CD() {
		return PRODUCT_NODE_CD;
	}

	public void setPRODUCT_NODE_CD(String product_node_cd) {
		PRODUCT_NODE_CD = product_node_cd;
	}

	public Connection getConn() {
		return conn;
	}

	public void setConn(Connection conn) {
		this.conn = conn;
	}

	private Connection conn = null;

	@Override
	public void run() {
		try {
			this.toProcessRiskNode();
		} catch (Exception e) {
			write = false;
			PlCIncrementDAO plCIncrementDAO = DAOFactory.getPlcIncrecentDAO();
			Connection conp = null;
			try {
				conp = ConnDB.getPharosConn();
				plCIncrementDAO.updateStatus(conp, Long.valueOf(object_Id), Constants.INCREMENT_WRITE_BACK_STATUS_2);

			} catch (Exception e2) {
				log.error("", e2);
			} finally {
				if (conp != null) {
					try {
						conp.close();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
			}
			log.error("", e);
			// 记录日志到 stg_run_log 表中
			StgRunLog stgLog = new StgRunLog();
			stgLog.setErrorCode("2");
			stgLog.setErrorMessage(e.toString());
			stgLog.setObjectId(object_Id);
			stgLog.setObjectNo(object_no);
			RunLogDAO rld = new RunLogDAO();
			try {
				rld.insertLog(stgLog);
			} catch (SQLException e2) {
				log.error("log error:", e2);
			} catch (NamingException e2) {
				log.error("log error:", e2);
			}

		}

		stopBean.setStop(stopBean.getStop() + 1);
	}

	@SuppressWarnings("unchecked")
	public void toProcessRiskNode() throws Exception {
		int countsOfRiskNode = riskNodeIDlist.size();
		// long ftimes = 0;
		for (int temp = 0; temp < countsOfRiskNode; temp++) {
			Long riskNodeid = riskNodeIDlist.get(temp);

			WContractNode node = wContractBo.getContractNode(riskNodeid);

			long contractId = node.getContractId();
			String dcsNodeId = node.getDcsNodeCode();
			WContract singleWContract = wContractBo.getContractSingleBranch(contractId, riskNodeid);
			Map<String, String> globalDataMap = new HashMap<String, String>();
			globalDataMap.put("policyno", policyNo);
			globalDataMap.put("proposalno", proposalNo);
			globalDataMap.put("endorseno", endorseNo);
			globalDataMap.put("contractno", contractNo);
			globalDataMap.put("nodeno", node.getNodeNo());
			globalDataMap.put("objectid", object_Id);
			globalDataMap.put("mainversion", node.getMainVersion() + "");
			globalDataMap.put("version", node.getVersion() + "");
			globalDataMap.put("subjectno", node.getDcsNodeCode());
			globalDataMap.put("startdate", startdate);
			globalDataMap.put("enddate", enddate);
			globalDataMap.put("lastendorseno", lastEndorseNo);
			globalDataMap.put("endorsetext", endorsetext);
			globalDataMap.put("productcode", productCode);
			String edrflag = "0"; // 批改标志
			String newflag = "0"; // 最新保全标志
			if (proposalNo.equals(incrProposalNo)) {
				edrflag = "1";
				newflag = "1";
			} else {
				edrflag = "0";
				newflag = "0";
			}
			globalDataMap.put("edrflag", edrflag);
			globalDataMap.put("newflag", newflag);

			// ftimes = System.currentTimeMillis();
			ProductMappingBuilder singleProductMappingBuilder = new ProductMappingBuilder(PRODUCT_CD);
			singleProductMappingBuilder.setMapDocument(MappingCacheManager.getMapping(PRODUCT_CD, PRODUCT_NODE_CD, "2_1_" + dcsNodeId));
			// log.info("EndorseRiskNodeThead的singleBranch模版共耗时:"+(System.currentTimeMillis()-ftimes));

			// ftimes = System.currentTimeMillis();
			singleProductMappingBuilder.setBContract(singleWContract);
			singleProductMappingBuilder.setGlobalDataMap(globalDataMap);
			singleProductMappingBuilder.execute();
			// log.info("EndorseRiskNodeThead的196共耗时:"+(System.currentTimeMillis()-ftimes));

			// ftimes = System.currentTimeMillis();
			StorageTransAction storage = new StorageTransAction();
			storage.setConnection(conn);
			storage.setSColumns(singleProductMappingBuilder.getResult());
			storage.buildStatement();
			storage.execute();
			// log.info("EndorseRiskNodeThead的singleBranch拼sql共耗时"+(System.currentTimeMillis()-ftimes));

			singleProductMappingBuilder = null;

			if (Runtime.getRuntime().freeMemory() < 50 * 1024 * 1024) {
				System.gc();
			}
			j.setNow(++countChar);
			j.setTotal(countsOfRiskNode);
		}
	}

	/**
	 * 得到上一版本的标的号
	 * 
	 * @param bContractBo
	 * @param riskNode
	 * @return
	 * @throws CTMException
	 */
	public String getObject_no() {
		return object_no;
	}

	public void setObject_no(String object_no) {
		this.object_no = object_no;
	}

	public boolean isWrite() {
		return write;
	}

	public void setWrite(boolean write) {
		this.write = write;
	}

	public String getOriginalprpno() {
		return originalprpno;
	}

	public void setOriginalprpno(String originalprpno) {
		this.originalprpno = originalprpno;
	}

}
