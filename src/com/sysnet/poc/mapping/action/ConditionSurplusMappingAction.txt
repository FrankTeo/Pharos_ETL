package com.sysnet.poc.mapping.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import pharos.ctm.condition.surplus.vo.BConditionSurplus;
import pharos.ctm.vo.BDeclaration;
import pharos.framework.base.Money;
import pharos.framework.constparameter.constant.ConstDataType;
import pharos.framework.p.ElementEnum;

import com.sysnet.poc.mapping.ReflectUtil;
import com.sysnet.poc.mapping.SequenceUtil;
import com.sysnet.poc.mapping.vo.Item;
import com.sysnet.poc.mapping.vo.MappingDescription;
import com.sysnet.poc.mapping.vo.Table;
import com.sysnet.poc.util.DateHelper;

public class ConditionSurplusMappingAction extends AbsPharosMappingAction {

	private Item item;

	private Logger log = Logger.getLogger(ConditionSurplusMappingAction.class);

	@SuppressWarnings("finally")
	public boolean execute() {
		boolean rs = false;
		try {
			if ((item.getParameter().trim()).equals("timestamp")) {
				item.setValue("null");
			}

			// 如果是 序列取序列的值
			if (item.getSequenceName() != null && !item.getSequenceName().equals("")) {
				String seq = String.valueOf(SequenceUtil.getSequenceNextValueByName(item.getSequenceName()));// 取序列
				item.setValue(seq);

				// item.setValue("1");//临时
			}
			// 如果是引用取引用的值
			else if (item.getRef() != null && !item.getRef().equals("")) {
				String arr[] = item.getRef().split("[/]");
				MappingDescription mapDesc = item.getParent().getParent();
				List<Table> tableList = mapDesc.getTable();
				int j = 0;
				for (Table table : tableList) {

					if (item.getParameter().equals("itemno")) {
						if (table.getTableName().equalsIgnoreCase(arr[1]) && table.getDataProvide().equalsIgnoreCase(arr[0])) {
							if (!(j == this.getJ())) {
								j++;
								continue;
							}

							List<Item> itemList = table.getItems();
							for (Item _item : itemList) {
								if (_item.getName().equalsIgnoreCase(arr[2])) {
									item.setValue(_item.getValue());
									break;
								}
							}
							break;
						}
					} else {
						if (table.getTableName().equalsIgnoreCase(arr[1]) && table.getDataProvide().equalsIgnoreCase(arr[0])) {
							List<Item> itemList = table.getItems();
							for (Item _item : itemList) {
								if (_item.getName().equalsIgnoreCase(arr[2])) {
									item.setValue(_item.getValue());
									break;
								}
							}
							break;
						}
					}

				}
			} else {
				BConditionSurplus bs = (BConditionSurplus) this.provideInstnace;
				if (item.getParameter() == null || item.getParameter().equals("")) {
					String methodNm = item.getMethod();
					Object obj = null;
					if (methodNm == null) {
						log.debug("Condition method not found!" + item.getParameter());
						return true;
					}
					// 调用反射
					if (methodNm.indexOf(".") != -1) {
						String temp[] = methodNm.split("[.]");
						for (int i = 0; i < temp.length; i++) {
							if (i == 0) {
								obj = ReflectUtil.getObjByReflect(bs, temp[i]);
							} else {
								obj = ReflectUtil.getObjByReflect(obj, temp[i]);
							}
						}

					} else {
						obj = ReflectUtil.getObjByReflect(bs, methodNm);
					}

					if (obj instanceof java.util.Date) {
						item.setValue(DateHelper.convertEnDateToCnDateTime(String.valueOf(obj)));
					} else {
						item.setValue(String.valueOf(obj));
					}
				} else {
					String parameter = item.getParameter();
					BDeclaration d = (BDeclaration) bs.getElementByName(ElementEnum.BDECLARATION_CODE, parameter, false);
					if (d != null) {
						if (ConstDataType.MONEY == d.getDataType()) {

							if (d != null && d.getValue() != null) {
								Money m = (Money) d.getValue();
								item.setValue(String.valueOf(m.getAmount()));
							}
						} else if (ConstDataType.DATETIME == d.getDataType()) {
							if (d != null && d.getValue() != null) {
								Date date = (Date) d.getValue();
								String format = "yyyy-MM-dd HH:mm:ss";
								SimpleDateFormat sdf = this.getSimpleDateFormat(format);
								String str = sdf.format(date);
								str = DateHelper.convertEnDateToCnDateTime(String.valueOf(date));
								item.setValue(str);
							}
						} else {
							item.setValue(String.valueOf(d.getValue()));
						}
					}
				}
			}
			rs = true;
		} catch (Exception ex) {
			// ex.printStackTrace();
			log.debug(ex.getMessage());
		} finally {
			return rs;
		}

	}

	private SimpleDateFormat getSimpleDateFormat(String format) {
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		return sdf;
	}

	public void setMappingItem(Item item) {
		this.item = item;
	}

}
